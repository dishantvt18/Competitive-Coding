Tree Related : 
Use HLD when required to update something in path between u and v and query related to it.
Use Euler when queries and updates are related to subtree of some vertex v.

1. HLD + Euler (CF 343D - Water Tree): Used st and ft arrays in their HLD entry and finish time. Cool approach!
   https://codeforces.com/contest/343/submission/46961209

2. Euler tour + Segtree
   https://codeforces.com/contest/620/submission/46958465
You can usually use presum when dealing with Euler + segtree and avoid using segtree(because st[u] -> ft[u] can be answered as pre[positionOfFT[u]] - pre[positionOfST[u]]).

DSU on trees: 
Can be used to handle queries of type : **How many vertices satisfy a particular property in the subtree of v.**
**Can only be used to answer queries offline. Only works when we have no updates**
https://codeforces.com/contest/208/problem/E - Check all the approaches. Order of big[bigChild] = true matters! 
Brilliant problem : https://codeforces.com/contest/375/problem/D
Solution : https://codeforces.com/contest/375/submission/51476566

Mo's on trees:
Can be used for both path queries and subtree queries - COOL! 
//TODO.

Graphs :

** DSU(MST application) : Brilliant question - https://codeforces.com/contest/1081/problem/D
    How to solve? Construct a MST. It is clear that the maximum "cost" of path between any two nodes will always be present in MST. So, run Prim's algo from any spcl node. We get the answer : https://codeforces.com/contest/1081/submission/47148263
    Alternate way : Check editorial - Talks about DSU!

    Similar and good problems: Sorting  + DSU => https://codeforces.com/contest/437/problem/D and KOICOST on SPOJ.

Persistent Segment Tree:
	Check Geeks and Anudeep's blog for understanding.
	Problem 1: https://www.codechef.com/problems/SEGSUMQ (Check editorial and tester's solution -> Brilliant explanation)
	Lazy in persistence :- Comment in https://discuss.codechef.com/questions/101647/persistence-made-simple-tutorial 
						   and https://codeforces.com/contest/1091/submission/47768272 
	

HASHING : 
	If the time limit is too tight for O(nlogn) solutions to pass, instead of computing inverses we can apply another trick.
	DO NOT multiply inverses, instead store powers and multiply difference of powers so that we can compare the hash values.
	Say, if we want to compare hash values of [0, p] and [l, l + p], we can find hash values of [0, p] and [l, l + p] by rolling hash and then muliply power[l] to the hash obtd. of [0, p]. This guarantees we are comparing strings in same power to base.
	Example : https://www.codechef.com/status/INSQ15_A,dishant_18
	Ex2 : https://www.codechef.com/viewsolution/23128759

DIGIT DP :
	Video source and problems: https://www.youtube.com/watch?v=Pa4YwO8B8-w&fbclid=IwAR12ZlK_He2jioU63e5T8cHIGay6nO7W3RXUoU0qqOIBhNJ-8obz9wJ7rw0 
	Another good source : https://codeforces.com/blog/entry/53960 
	Template(sort-of) is in Ra-one number and Lucifer numbers problems of SPOJ. Question link is in YouTube video discription and even in blog.
	NOTE: Nice LCM trick: https://discuss.codechef.com/questions/83350/workchef-editorial
						  https://www.hackerearth.com/problem/algorithm/sallu-bhai-and-ias-8838ac8d/editorial/